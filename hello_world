#include <stdio.h>
#include <math.h>
#include <windows.h>
int p=0;
int main (){
    printf("Al momento 5 programmini:\n");
    printf("                1)Programma che scrive le potenze del due fino all'overflow\n");
    printf("                2)Programma che scrive i numeri pari minori o uguali a un intero dato\n");
    printf("                3)Programma che calcola il fattoriale di un numero\n");
    printf("                4)Convertitore da base 10 a binario naturale in 32bit\n");
    printf("                5)Convertitore da binario naturale a 32bit a base 10\n");
    printf("                6)Pao\n");
    printf("                7)Calcolatore max, min, med di una sequenza di numeri (array)\n");
    printf("                8)Programma che calcola max min e med dei numeri inseriti (no-array)\n");
    printf("                9)Programma che inverte una serie di valori\n");
    printf("                10)Programma per sommare due matrici di dimensioni e valori dati\n");
    printf("                11)Programma che moltiplica due matrici di dimensioni e valori dati\n");
    printf("                12)Programma che stampa un istogramma delle temperature corporee degli ultimi giorni\n");
    printf("                13)Programma che stampa l'istogramma delle temperature corporee ma verticale\n");
    printf("\n                  ^^^^ Scegliere un programma ^^^^\n");
    scanf("%d", &p);
/*programma 1 potenze del due fino all'overflow*/
if (p==1)
    {
        printf("Hai scelto 1)Programma che scrive le potenze del due fino all'overflow\n");
        int i=1, n=1;
        while (n<=32) /*2^30 è il massimo*/
        {
            i=i*2; /*raddoppia sempre il numero*/
            printf("2 alla %d è %d\n", n, i); 
            n++;      /*essendo in c2 si fermerà alla 2^30esima potenza*/
        }
    return(0);
    }
/*programma 2 numeri pari minori di un intero*/
if (p==2)
    {
        printf("Hai scelto 2)Programma che scrive i numeri pari minori o uguali a un intero dato\n");
        int N, pari = 0;
        printf("dammi un intero positivo:\n");
        scanf("%d", &N);
        printf("ecco i numeri pari minori o uguali a %d\n", N);
        while (pari<=N)
        {
            printf("%d\n", pari); /*stampa il numero pari più basso*/
            pari += 2; /*incrementa al successivo numero pari*/
        }
    return(0);   
    }
/*programma 3 fattoriale*/  
if (p==3)
    {
        printf("Hai scelto 3)Programma che calcola il fattoriale di un numero\n");
        int n, m, fatt=1;
        printf("inserisci n:\n");
        scanf("%d", &n);
        if (n<0) /*da errore se il fattoriale non è calcolabile*/
        {
            printf("numero negativo, fattoriale indefinito\n");
        }
        else {
            m = n; /*assegna una variabile ausiliaria per l'output bellino*/
            while (m>1)
            {
                fatt=fatt*m; /*calcola questo passaggio del fattoriale*/
                --m; /*conta quanti passaggi del fattoriale mancano*/
            }
        printf("%d! = %d\n", n, fatt);
        }
    return(0);
    }
/*programma 4 convertitore a binario*/
if (p==4)
{
    printf("Hai scelto 4)Convertitore da base 10 a binario naturale in 32bit\n");
    int n, r, pot, esp=0, som=0;
    printf("Inserisci il numero decimale da convertire: ");
    scanf("%d", &n);
    while (n>0) /*quando n è uguale a 0 avrò già salvato l'ultimo bit nel ciclo precedente*/
    {
        r = n % 2; /*calcolo il resto della divisione (prima di farla obv)*/
        pot = pow(10, esp); /*calcolo in quale casella di potenza di 10 assegnare la cifra*/
        som += (r * pot); /*aggiungo la cifra alla somma*/
        n/=2; /*divido il numero per 2*/
        esp++; /*incremento la potenza per la casella successiva*/
    }
    printf("Il numero convertito e' %d", som);
}
/*programma 5 convertitore da bin a dec*/
if (p==5)
{
    printf("Hai scelto 5)Convertitore da binario naturale a 32bit a base 10\n");
    int n, r, c, esp=0, som=0; /*n- numero in bin, r- resto (pari, dispari), c- cifra da stampare*/
    printf("Inserisci il numero in binario naturale: ");
    scanf("%d", &n);
    while (n!=0) /*devo leggere le cifre da dx a sx*/
    {
        r=n%2; /*se è pari l'ultima cifra è zero, se è dispari uno*/
        c=r*pow(2, esp); /*assegnamo la corretta casella alla prima cifra e alle successive in base alla potenza di 10*/
        som+=c; /*aggiungiamo subito al numero quello appena processato*/
        esp++; /*incrementiamo la casella per la prossima cifra*/
        n/=10; /*togliamo la cifra più a dx appena processata*/
    }
    printf("Il numero convertito e' %d", som); /*quando la divisione porta a zero posso stampare perchè non ho più cifre*/   
}
/*programma 6 pcuore*/
if (p==6)
{
    int i, j, n; /*i=altezza(numero di righe), j=variabile contatore, n=larghezza c*/
    printf("seleziona la dimensione(numero intero): \n");
    scanf("%d", &n);
    printf("\n");
    for (i = n / 2; i <= n; i += 2) { /*parte superiore del cuore, i determina l'altezza del cuore(quante righe) i+=2 fa stampare solo le righe dispari del cuore*/
        for (j = 1; j < n - i; j += 2) { /*stampa il numero di spazi vuoti a sinistra (aumenta nella parte alta)*/
            printf(" ");
        }
        for (j = 1; j <= i; j++) { /*stampa i punti a sx di ogni riga e aumenta di 1 finchè non è uguale a i */
            printf("*");
        }
        for (j = 1; j <= n - i; j++) {/*determina il numero di spazi vuoti tra i due lati del cuore*/
            printf(" ");
        }
        for (j = 1; j <= i; j++) { /*determina il numero di punti a dx di ogni riga*/
            printf("*");
        }
        printf("\n");
    }
    for (i = n; i >= 1; i--) { /*parte inferiore del cuore*/
        for (j = i; j < n; j++) { /*numero di spazi vuoti prima delle righe*/
            printf(" ");
        }
        for (j = 1; j <= (i * 2) - 1; j++) { /*numero di punti nella parte inferiore*/
            printf("*");
        }
        printf("\n");
    }
}
/*programma 7 max min e med con array*/
if (p==7)
{
    printf("Hai scelto 7)Programma che calcola max min e med dei numeri inseriti\n");
    int dim=1, max, min, ans=0, i=0, v[100]; /*dim= dimensione dell'array, numero di cifre*/
    char q='n';
    float med=0.0f; /*media float per fare la divisione corretta*/
    printf("scrivi una sequenza di interi, scrivi -1 per terminare:\n");
    while (ans!=1)/*finchè ans==0 (la risposta non è si) il ciclo continua*/
    {
        scanf("%d", &v[i]); /*scannerizza i numeri di input per ogni casella ennesima*/
        if (v[i]==-1) /*rileva se è stato inserito -1*/
        {
            printf("vuoi terminare la sequenza di numeri? Y/N\n"); /*conferma la volontà di terminare*/
            scanf(" %c", &q); /*leggere la risposta, aggiungo lo spazio prima del %c per non leggere eventuali caratteri tipo newline*/
            if (q=='y' || q=='Y') /*se è affermativa evita il ciclo successivo, se è negativa aggiunge l'uno alla stringa e ripete il ciclo*/
            {
                ans=1; /*segna la risposta affermativa e termina il ciclo*/
            }
        } 
        i++; 
    }
    dim-=2; /*quando il ciclo viene terminato cancella l'ultimo -1 e la casella creata in più (vuota) per l'eventuale ciclo successivo*/
    max=v[0]; /* il max viene assegnato al primo valore (tanto li scanneriziamo tutti)*/
    min=v[0];
    for ( i = 0; i < dim; i++) /*assegna max e min facendo passare tutti i valori inseriti*/
    {
        if (max<v[i])
        {
            max=v[i];
        }
        if (min>v[i])
        {
            min=v[i];
        }  
        med=med+v[i]; /*aggiunge alla somma dei numeri il numero ennesimo (avremo la somma di tutti i numeri)*/ 
    }
    med=med/dim; /*calcola la media*/
    printf("il max e': %d, il min e': %d, la media e' %f", max, min, med);    
} 
/*programma 8 max min e med senza array*/
if (p==8)
{
    printf("Hai scelto programma 8)Programma che calcola max min e med di una serie di valori (no-array)\n");
    int n=0, i=0, ans=0, max, min, som=0;
    char q;
    float med;
    printf("Scrivi una sequenza di numeri, scrivi -1 per terminare la sequenza:\n");
    while (ans!=1)
    {
        scanf("%d", &n);
        if (n==-1)
        {
            printf("<<  Vuoi terminare la sequenza o considerare il -1 nella sequenza?  >>\n<<    Y/N --- Y per terminare / N per considerare questo -1  >>\n");
            scanf(" %c", &q);
            if (q=='y' || q=='Y') /*se la risposta è affermativa rende ans uguale a 1*/
            {
                ans=1; /*ans uguale a 1 fermerà il prossimo if e quindi considererà -1 come valore non valido (se scelgo no verrà considerato il -1)*/
            } 
            printf("<<  Hai scelto di continuare, scrivi ulteriori numeri, scrivi nuovamente -1 per terminare:   >>\n");
        }
        if (ans==0)
        {
            if (i==0) /*se è il primo ciclo assegna max e min al primo numero*/
            {
                max=n;
                min=n;
            }
            if (n>max) /*se n è maggiore del max diventa il max*/
            {
                max=n;
            }
            if (n<min) /*se ne è minore del min diventa il min*/
            {
                min=n;
            }
            i++; /*conta quanti cicli validi (quelli con ans==o) ho fatto*/
            som+=n; /*aggiunge il valori validi alla media*/    
            //printf("i vale %d, som vale %d, max vale %d, min vale %d\n", i, som, max, min);     
        }              
    }
    med=(float)som/i;
    printf("Il max e' %d, il min e' %d, la med e' %f", max, min, med);    
}
/*programma 8 inversione stringa di input*/
if (p==9)
{
    printf("Hai scelto programma 9)Programma che inverte una serie di valori\n");
    int A[100], i=0, n=0;
    printf("Quanti valori vuoi inserire?\n");
    scanf("%d", &n);
    printf("Scrivi i valori: \n");
    while (i<n)
    {
        scanf("%d", &A[i]); /*legge il valore e lo mette nella i-esima casella*/
        i++; /*aumenta la casella*/
    }
    printf("I numeri in ordine inverso sono: ");
    while (n>=1) /*parte dal numero massimo di caselle e scende fino all'ultima (la 0)*/
    {
        printf("%d-", A[n-1]); /*stampa la n-1 per evitare di stampare il carattere vuoto posto nella casella dopo l'ultima inserita*/
        n--; /*scende fino ad arrivare alla prima casella inserita*/
    }    
}
/*programma somma di due matrici con qualche controllo variabili*/
if (p==10)
{
    printf("Hai scelto programma 10)Programma che somme due matrici di dimensioni date\n");
    int m=0, n=0, ma, na, mb, nb, i=0, j=0; /*i indica il numero di colonna sulla quale sto agendo e j il numero di riga*/
    printf("Inserisci le dimensioni della prima matrice A --> Mat(m,n):\n");
    printf("Inserisci m di A: \n");
    scanf("%d", &ma);    
    printf("Inserisci n di A: \n");
    scanf("%d", &na);  
    printf("Inserisci le dimensioni della seconda matrice B --> Mat(m,n):\n");
    printf("Inserisci m di B: \n");
    scanf("%d", &mb);
    printf("Inserisci n di B: \n"); 
    scanf("%d", &nb);
    if (ma<0 || na<0 || mb<0 || nb<0 || ma!=mb || na!=nb)
    {
        printf("Dimensioni delle matrici non adeguate\n");
        return 0;
    } 
    else
    {
        m=ma;
        n=na;
    }
    int A[m][n], B[m][n], C[m][n];  
    printf("Inserisci i valori per la matrice A(%d x %d): \n", m, n);
    while (j<n) /*incremento j (numero di riga per ultimo)*/                                        /*scan Mat A*/
    {
        while (i<m) /*finchè non ho letto tutta la prima riga continua a spostarmi nella colonna a dx*/
        {
            scanf("%d", &A[i][j]);
            i++; /*mi sposto di una colonna a dx*/
        }
        j++;/*quando ho finito la riga (i=na) mi sposto nella riga sotto*/ 
        i=0;/*devo impostare nuovamente i=0 per leggere la prima colonna fino all'ultima*/
    }
    i=0;
    j=0;
    printf("La matrice A(%d x %d) e':\n", m, n);                                                     /*print Mat A*/
    while (j<n) /*stampa la matrice A allo stesso modo*/
    {
        while (i<m)
        {
            printf("%d ", A[i][j]);
            i++;
        }
        j++;
        i=0;
        printf("\n"); /*va a capo per formattare la seconda riga sotto la prima*/
    }
    printf("Inserisci i valori per la matrice B(%d x %d): \n", m, n);
    for (j = 0; j < n; j++) /*legge la matrice B con un for (altro metodo)*/                            /*scan Mat B*/
    {
        for (i = 0; i < m; i++)
        {
            scanf("%d", &B[i][j]);
        }
    }
    printf("La matrice B(%d x %d) e':\n", m, n);                                                    /*print Mat B*/
    for (j = 0; j < n; j++)
    {
        for (i = 0; i < m; i++)
        {
            printf("%d ", B[i][j]);
        }
        printf("\n");
    }
    printf("La matrice somma C(%d x %d) e': [%d", m, n, C[0]);                                              /*printf Mat C*/    
    for (j = 1; j < n; j++)                                                                           /*sum Mat C*/
    {
        for (i = 0; i < m; i++)
        {
            C[i][j]=A[i][j]+B[i][j]; /*somma ogni casella alla sua corrispettiva*/
            printf("%d ", C[i][j]); /*mettere spazio dopo %d per avere uno spazio fra i numeri*/
        } 
        printf("\n"); /*stampa \n per allineare correttamente la riga successiva*/
    }
}
if (p==11)
{
    printf("Hai scelto programma 11)Programma che moltiplica due matrici\n");
}
/*programma 12 esercizio 2 laboratorio 02*/
if (p==12)
{
    #define DURATA 4
    printf("Hai scelto esercizio 12)Programma che stampa l'istogramma delle temperature corporee\n");
    float T[7], tmin=34.0f, max=0.0f, min=0.0f, med;
    int i/*temperatura i-esima*/, g/*giorno g-esimo*/, n/*numero di asterisco*/, t, tminint=34;
    printf("Scrivi le temperature raccolte\n");
    for (g = 1; g <= DURATA; g++) /*parto da 1 per raccogliere le cifre senza il giorno 0*/
    {
        scanf("%f", &T[g]); /*scannerizza le temperature come float*/
    }
    printf("\nGiorno Valore Istogramma\n");                 /*array letto*/
    for (g = 1; g <= DURATA; g++) /*parto sempre da 1 per non utilizzare la prima casella array*/
    {   
        printf("%d ", g);   /*stampo il giorno corrente*/    
        printf("%.1f ", T[g]);/*stampo la temperatura del giorno corrente*/
        if (T[g]>tmin) /*se la temperatura è maggiore del giorno corrente allora stampo gli asterisco*/
        {
            t=T[g]; /*assegno un valore int alla temperatura*/
            n=t%tminint; /*calcolo quanti asterisco devo stampare*/
            for (i = 0; i < n; i++) /*stampo il numero di asterisco*/
            {
                printf("*");
            }
        }   
        printf("\n"); /*vado a capo per il giorno successivo*/
    }
    max=T[1];                                           /*max min e media*/
    min=T[1];
    for (i = 1; i <= DURATA; i++) /*parto sempre da 1*/
    {
        if (T[i]>max)
        {
            max=T[i];
        }
        if (T[i]<min)
        {
            min=T[i];
        }
        med+=T[i];
    }
    printf("Il max e': %.1f\n", max);
    printf("Il min e': %.1f\n", min);
    med/=DURATA;
    printf("La media e': %.2f", med); 
}
if (p==13)
{
    #define DURATA 4
    printf("Hai scelto esercizio 13)Programma che stampa l'istogramma delle temperature corporee\n");
    float T[7], tmin=34.0f, max=0.0f, min=0.0f, med;
    int i/*riga output i-esima*/, g/*giorno g-esimo*/, n/*numero di asterisco*/, t, tminint=34;
    printf("Scrivi le temperature raccolte\n");
    for (g = 1; g <= DURATA; g++) /*parto da 1 per raccogliere le cifre senza il giorno 0*/
    {
        scanf("%f", &T[g]); /*scannerizza le temperature come float*/
        if (g==1)
        {
            max=T[g];
            min=T[g];
        } 
        if (T[g]>max)
        {
            max=T[g];  /*calcolo il numero massimo di asterisco in float (è la temperatura più alta)(sarà la lunghezza dell'output)*/
            t=T[g]; /*approssimo T[g] a un intero*/
            n=t%tminint; /*calcolo il numero massimo di asterisco int*/
        }
        if (T[g]<min)
        {
            min=T[g];
        }
        med+=T[g];
    }
    med/=DURATA;
    printf("max %.1f, min %.1f, med %.1f\n\n", max, min, med);
    while (n>0) /*parto dalla prima riga e decresco fino a finirle*/
    {
        for (g = 1; g <= DURATA; g++)
        {   
            t=T[g]; /*assegna a t l'intero della temperatura appossimato*/
            if (t%tminint>=n) /*se la giornata g ha T[g]%tminint > n allora dovrò stampare un * */
            {
                printf(" *   ");
            }
            else printf("     "); /*altrimenti significa che la temperatura è minore del numero di asterisco a cui sono arrivato e stamperò spazio vuoto*/
        }
        printf("\n");
        n--; /*passo alla riga sottostante*/
    }
    for (g = 1; g <= DURATA; g++) /*stampo le temperature sotto, forse si può unire al cilo for di prima*/
    {
        printf("%.1f ", T[g]);
    }   
}

if (p>13 || p<0)
{
    printf("programma inesistente");
}
Sleep (500);
}